"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThingType = void 0;
const RequestBuilder_1 = require("../../../common/rpc/RequestBuilder");
const Type_1 = require("./Type");
const TypeDBClientError_1 = require("../../../common/errors/TypeDBClientError");
const ErrorMessage_1 = require("../../../common/errors/ErrorMessage");
var BAD_ANNOTATION = ErrorMessage_1.ErrorMessage.Concept.BAD_ANNOTATION;
var ThingType;
(function (ThingType) {
    class Annotation {
        constructor(name) {
            this.name = name;
        }
        static parse(string) {
            if (string == Annotation.KEY.name)
                return Annotation.KEY;
            else if (string == Annotation.UNIQUE.name)
                return Annotation.KEY;
            else
                throw new TypeDBClientError_1.TypeDBClientError(BAD_ANNOTATION.message(string));
        }
        toString() {
            return "[annotation: " + this.name + "]";
        }
    }
    Annotation.KEY = new Annotation("key");
    Annotation.UNIQUE = new Annotation("unique");
    ThingType.Annotation = Annotation;
    (function (Annotation) {
        function proto(annotation) {
            if (annotation == Annotation.KEY) {
                return RequestBuilder_1.RequestBuilder.Type.Annotation.annotationKeyProto();
            }
            else if (annotation == Annotation.UNIQUE) {
                return RequestBuilder_1.RequestBuilder.Type.Annotation.annotationUniqueProto();
            }
            else {
                throw new TypeDBClientError_1.TypeDBClientError((BAD_ANNOTATION.message(annotation)));
            }
        }
        Annotation.proto = proto;
    })(Annotation = ThingType.Annotation || (ThingType.Annotation = {}));
    function proto(thingType) {
        return RequestBuilder_1.RequestBuilder.Type.ThingType.protoThingType(thingType.label, Type_1.Type.encoding(thingType));
    }
    ThingType.proto = proto;
})(ThingType = exports.ThingType || (exports.ThingType = {}));
