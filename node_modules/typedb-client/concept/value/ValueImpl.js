"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueImpl = void 0;
const ConceptImpl_1 = require("../ConceptImpl");
const Concept_1 = require("../../api/concept/Concept");
const TypeDBClientError_1 = require("../../common/errors/TypeDBClientError");
const ErrorMessage_1 = require("../../common/errors/ErrorMessage");
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
var ValueType = Concept_1.Concept.ValueType;
var VALUE_HAS_NO_REMOTE = ErrorMessage_1.ErrorMessage.Concept.VALUE_HAS_NO_REMOTE;
var INVALID_CONCEPT_CASTING = ErrorMessage_1.ErrorMessage.Concept.INVALID_CONCEPT_CASTING;
var BAD_VALUE_TYPE = ErrorMessage_1.ErrorMessage.Concept.BAD_VALUE_TYPE;
class ValueImpl extends ConceptImpl_1.ConceptImpl {
    constructor(type) {
        super();
        this._valueType = type;
    }
    get valueType() {
        return this._valueType;
    }
    asRemote(transaction) {
        throw new TypeDBClientError_1.TypeDBClientError(VALUE_HAS_NO_REMOTE);
    }
    isValue() {
        return true;
    }
    asValue() {
        return this;
    }
    equals(concept) {
        if (!concept.isValue())
            return false;
        else {
            return this.valueType == concept.asValue().valueType && this.value == concept.asValue().value;
        }
    }
    toJSONRecord() {
        let value;
        if (this.value instanceof Date)
            value = this.value.toISOString().slice(0, -1);
        else
            value = this.value;
        return {
            value_type: this.valueType.name(),
            value: value
        };
    }
    isBoolean() {
        return false;
    }
    isDateTime() {
        return false;
    }
    isDouble() {
        return false;
    }
    isLong() {
        return false;
    }
    isString() {
        return false;
    }
    asBoolean() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Value.Boolean"));
    }
    asLong() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Value.Long"));
    }
    asDouble() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Value.Double"));
    }
    asString() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Value.String"));
    }
    asDateTime() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Value.DateTime"));
    }
}
exports.ValueImpl = ValueImpl;
(function (ValueImpl) {
    function of(valueProto) {
        if (!valueProto)
            return null;
        switch (valueProto.getValueType()) {
            case concept_pb_1.ValueType.BOOLEAN:
                return new ValueImpl.Boolean(valueProto.getValue().getBoolean());
            case concept_pb_1.ValueType.LONG:
                return new ValueImpl.Long(valueProto.getValue().getLong());
            case concept_pb_1.ValueType.DOUBLE:
                return new ValueImpl.Double(valueProto.getValue().getDouble());
            case concept_pb_1.ValueType.STRING:
                return new ValueImpl.String(valueProto.getValue().getString());
            case concept_pb_1.ValueType.DATETIME:
                return new ValueImpl.DateTime(new Date(valueProto.getValue().getDateTime()));
            default:
                throw new TypeDBClientError_1.TypeDBClientError(BAD_VALUE_TYPE.message(valueProto.getValueType()));
        }
    }
    ValueImpl.of = of;
    class Boolean extends ValueImpl {
        constructor(value) {
            super(ValueType.BOOLEAN);
            this._value = value;
        }
        get value() {
            return this._value;
        }
        isBoolean() {
            return true;
        }
        asBoolean() {
            return this;
        }
        get className() {
            return "Value.Boolean";
        }
    }
    ValueImpl.Boolean = Boolean;
    class Long extends ValueImpl {
        constructor(value) {
            super(ValueType.LONG);
            this._value = value;
        }
        get value() {
            return this._value;
        }
        isLong() {
            return true;
        }
        asLong() {
            return this;
        }
        get className() {
            return "Value.Long";
        }
    }
    ValueImpl.Long = Long;
    class Double extends ValueImpl {
        constructor(value) {
            super(ValueType.DOUBLE);
            this._value = value;
        }
        get value() {
            return this._value;
        }
        isDouble() {
            return true;
        }
        asDouble() {
            return this;
        }
        get className() {
            return "Value.Double";
        }
    }
    ValueImpl.Double = Double;
    class String extends ValueImpl {
        constructor(value) {
            super(ValueType.STRING);
            this._value = value;
        }
        get value() {
            return this._value;
        }
        isString() {
            return true;
        }
        asString() {
            return this;
        }
        get className() {
            return "Value.String";
        }
    }
    ValueImpl.String = String;
    class DateTime extends ValueImpl {
        constructor(value) {
            super(ValueType.DATETIME);
            this._value = value;
        }
        get value() {
            return this._value;
        }
        isDateTime() {
            return true;
        }
        asDateTime() {
            return this;
        }
        get className() {
            return "Value.DateTime";
        }
    }
    ValueImpl.DateTime = DateTime;
})(ValueImpl = exports.ValueImpl || (exports.ValueImpl = {}));
