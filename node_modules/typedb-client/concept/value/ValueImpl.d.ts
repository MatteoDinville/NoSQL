import { Value } from "../../api/concept/value/Value";
import { ConceptImpl } from "../ConceptImpl";
import { Concept } from "../../api/concept/Concept";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Value as ValueProto } from "typedb-protocol/common/concept_pb";
import ValueType = Concept.ValueType;
export declare abstract class ValueImpl extends ConceptImpl implements Value {
    private readonly _valueType;
    protected constructor(type: ValueType);
    get valueType(): ValueType;
    abstract get value(): boolean | string | number | Date;
    asRemote(transaction: TypeDBTransaction): Concept.Remote;
    isValue(): boolean;
    asValue(): Value;
    equals(concept: Concept): boolean;
    toJSONRecord(): Record<string, boolean | string | number>;
    isBoolean(): boolean;
    isDateTime(): boolean;
    isDouble(): boolean;
    isLong(): boolean;
    isString(): boolean;
    asBoolean(): Value.Boolean;
    asLong(): Value.Long;
    asDouble(): Value.Double;
    asString(): Value.String;
    asDateTime(): Value.DateTime;
}
export declare namespace ValueImpl {
    function of(valueProto: ValueProto): Value;
    class Boolean extends ValueImpl implements Value.Boolean {
        readonly _value: boolean;
        constructor(value: boolean);
        get value(): boolean;
        isBoolean(): boolean;
        asBoolean(): Value.Boolean;
        protected get className(): string;
    }
    class Long extends ValueImpl implements Value.Long {
        readonly _value: number;
        constructor(value: number);
        get value(): number;
        isLong(): boolean;
        asLong(): Value.Long;
        protected get className(): string;
    }
    class Double extends ValueImpl implements Value.Double {
        readonly _value: number;
        constructor(value: number);
        get value(): number;
        isDouble(): boolean;
        asDouble(): Value.Double;
        protected get className(): string;
    }
    class String extends ValueImpl implements Value.String {
        readonly _value: string;
        constructor(value: string);
        get value(): string;
        isString(): boolean;
        asString(): Value.String;
        protected get className(): string;
    }
    class DateTime extends ValueImpl implements Value.DateTime {
        readonly _value: Date;
        constructor(value: Date);
        get value(): Date;
        isDateTime(): boolean;
        asDateTime(): Value.DateTime;
        protected get className(): string;
    }
}
